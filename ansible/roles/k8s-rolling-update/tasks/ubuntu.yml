---
- name: Unhold kubeadm
  dpkg_selections:
    name: kubeadm
    selection: install

- name: Upgrade kubeadm
  apt:
    name: kubeadm=1.24.1-00
    state: present
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true

- name: Hold kubeadm
  dpkg_selections:
    name: kubeadm
    selection: hold

#- name: Run kubeadm upgrade on first master
#  ansible.builtin.expect:
#    command: >-
#      /usr/bin/kubeadm upgrade apply v1.24.1
#      when: inventory_hostname == "{{ groups['kube-master'][0] }}"
#    responses:
#      - '[upgrade/confirm] Are you sure you want to proceed with the upgrade? [y/N]:': 'y'

- name: Run kubeadm upgrade all other nodes
  ansible.builtin.expect:
    command: >-
      /usr/bin/kubeadm upgrade node
      when: inventory_hostname == !"{{ groups['kube-master'][0] }}"
    responses:
      - '[upgrade/confirm] Are you sure you want to proceed with the upgrade? [y/N]:': 'y'

- name: Unhold kubelet
  dpkg_selections:
    name: kubelet
    selection: install

- name: Unhold kubectl
  dpkg_selections:
    name: kubectl

- name: Upgrade kubelet and kubectl
  apt:
    pkg:
          - kubectl=1.24.1-00
          - kubelet=1.24.1-00
    state: present
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true

- name: Hold kubelet
  dpkg_selections:
    name: kubeadm
    selection: hold

- name: Hold kubectl
  dpkg_selections:
    name: kubectl
    selection: hold

- name: Reboot the server
  reboot:
    post_reboot_delay: 30

- name: Wait for the reboot and reconnect 
  wait_for:
    port: 22
    host: '{{ kube_override_hostname|default(inventory_hostname) }}'
    search_regex: OpenSSH
    delay: 10
    timeout: 60
  connection: local
#  when: reboot_required.stat.exists

  #- name: Check if reboot is required
  #  stat:
  #    path: /var/run/reboot-required
  #  register: reboot_required

  #- name: Reboot the server
  #  reboot:
  #    post_reboot_delay: 30
  #  when: reboot_required.stat.exists
